name: Phi Runtime Test

# Tests the Phi-3 example with model download and execution (faster than Llama)
# - Multi-platform: Ubuntu (CPU/default), macOS (CPU/Metal)
# - CUDA testing: Only on GPU runners when explicitly requested or workflow_dispatch
# - Uses --gen_tokens 10 for faster execution, includes model caching

on:
  push:
    branches: [ "main", "*dev", "ci*" ]
  pull_request:
    branches: [ "main", "*dev" ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  detect-gpu:
    name: GPU Detection
    runs-on: ubuntu-latest
    outputs:
      cuda_available: ${{ steps.gpu.outputs.available }}
    steps:
    - name: Check for NVIDIA GPU
      id: gpu
      run: |
        if command -v nvidia-smi &> /dev/null && nvidia-smi &> /dev/null; then
          echo "available=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Physical GPU detected"
          nvidia-smi --query-gpu=name,memory.total,driver_version --format=csv,noheader
        else
          echo "available=false" >> $GITHUB_OUTPUT
          echo "‚ÑπÔ∏è No physical GPU detected"
        fi

  multi-platform-test:
    name: Multi-Platform Test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        features: [default, metal]
        exclude:
          # Metal only works on macOS
          - os: ubuntu-latest
            features: metal

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo
      uses: Swatinem/rust-cache@v2
      with:
        save-if: always()

    - name: Cache model files
      uses: actions/cache@v4
      with:
        path: examples/phi/setup
        key: phi-models-${{ hashFiles('examples/phi/setup/setup.sh') }}

    - name: Run setup script if needed
      working-directory: examples/phi
      run: |
        if [ ! -f setup/*.gguf ]; then
          bash ./setup/setup.sh
        else
          echo "Model files already exist, skipping setup"
        fi

    - name: Run phi example
      working-directory: examples/phi
      timeout-minutes: 5
      run: |
        echo "üöÄ Running Phi-3 model with ${{ matrix.features }}..."
        if [[ "${{ matrix.features }}" == "default" ]]; then
          echo "‚úÖ Using CPU backend"
          cargo run --release -- --gen_tokens 10
        else
          echo "‚úÖ Using ${{ matrix.features }} backend"
          cargo run --release --features ${{ matrix.features }} -- --gen_tokens 10
        fi

  cuda-test:
    name: CUDA Test
    runs-on: ${{ github.repository_owner == 'lucky-tensor' && 'gpu-runners' || 'ubuntu-latest' }}
    needs: detect-gpu
    timeout-minutes: 30
    # Only run CUDA tests when explicitly requested via 'test-gpu' label or manual trigger
    if: contains(github.event.pull_request.labels.*.name, 'test-gpu') || github.event_name == 'workflow_dispatch'

    env:
      CUDA_AVAILABLE: ${{ needs.detect-gpu.outputs.cuda_available }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup CUDA
      if: env.CUDA_AVAILABLE != 'true'
      run: |
        chmod +x ./installers/setup-nvidia.sh
        ./installers/setup-nvidia.sh

    - name: Cache Cargo
      uses: Swatinem/rust-cache@v2
      with:
        save-if: always()

    - name: Cache model files
      uses: actions/cache@v4
      with:
        path: examples/phi/setup
        key: phi-models-${{ hashFiles('examples/phi/setup/setup.sh') }}

    - name: Run setup script if needed
      working-directory: examples/phi
      run: |
        if [[ "${{ env.CUDA_AVAILABLE }}" != "true" ]]; then
          echo "‚è≠Ô∏è Skipping model setup - CUDA test will be skipped"
          exit 0
        fi
        if [ ! -f setup/*.gguf ]; then
          bash ./setup/setup.sh
        else
          echo "Model files already exist, skipping setup"
        fi

    - name: Run phi example with CUDA
      working-directory: examples/phi
      timeout-minutes: 5
      env:
        LD_LIBRARY_PATH: "/usr/local/cuda-12.2/lib64:/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"
      run: |
        if [[ "${{ env.CUDA_AVAILABLE }}" != "true" ]]; then
          echo "‚è≠Ô∏è Skipping CUDA test - no physical GPU available"
          exit 0
        fi

        echo "üöÄ Running Phi-3 model with CUDA..."
        echo "‚úÖ Using physical GPU acceleration"
        cargo run --release --features cuda -- --gen_tokens 10
