name: Build Examples

on:
  push:
    branches: [ "main", "*dev", "ci*" ]
  pull_request:
    branches: [ "main", "*dev" ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  detect-gpu:
    name: GPU Detection
    runs-on: ubuntu-latest
    outputs:
      cuda_available: ${{ steps.gpu.outputs.available }}
    steps:
    - name: Check for NVIDIA GPU
      id: gpu
      run: |
        if command -v nvidia-smi &> /dev/null && nvidia-smi &> /dev/null; then
          echo "available=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Physical GPU detected"
        else
          echo "available=false" >> $GITHUB_OUTPUT  
          echo "‚ÑπÔ∏è No physical GPU detected"
        fi

  test-examples:
    name: Test Examples
    runs-on: ${{ matrix.os }}
    needs: detect-gpu
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]
        features: [cpu, cuda, metal]
        exclude:
          # Metal only works on macOS
          - os: ubuntu-latest
            features: metal
          # CUDA only works on Ubuntu (for CI)  
          - os: macos-latest
            features: cuda
          # Skip CUDA if no GPU available
          - features: cuda
            os: ubuntu-latest
        include:
          # Only include CUDA on Ubuntu when GPU is available
          - os: ubuntu-latest
            rust: stable  
            features: cuda
            cuda_required: true

    env:
      CUDA_AVAILABLE: ${{ needs.detect-gpu.outputs.cuda_available }}
      
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Setup CUDA
      if: matrix.features == 'cuda' && env.CUDA_AVAILABLE == 'true'
      run: |
        chmod +x ./installers/setup-nvidia.sh
        ./installers/setup-nvidia.sh

    - name: Cache Cargo
      uses: Swatinem/rust-cache@v2

    - name: Test Examples
      env:
        LD_LIBRARY_PATH: "/usr/local/cuda-12.2/lib64:/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"
      run: |
        # Skip CUDA tests if no GPU available
        if [[ "${{ matrix.features }}" == "cuda" && "${{ env.CUDA_AVAILABLE }}" != "true" ]]; then
          echo "‚è≠Ô∏è Skipping CUDA tests - no physical GPU available"
          exit 0
        fi

        examples_dir="examples"
        failed_examples=()
        skipped_examples=() 
        passed_examples=()

        for example_dir in "$examples_dir"/*; do
          if [[ -d "$example_dir" && -f "$example_dir/Cargo.toml" ]]; then
            example_name=$(basename "$example_dir")
            
            echo "üî® Building $example_name with ${{ matrix.features }} features..."
            
            if [[ "${{ matrix.features }}" == "cpu" ]]; then
              # CPU-only build for simple example
              if [[ "$example_name" == "simple" ]]; then
                if cargo build --manifest-path "$example_dir/Cargo.toml" --verbose; then
                  passed_examples+=("$example_name")
                  echo "‚úÖ $example_name passed"
                else
                  failed_examples+=("$example_name")
                  echo "‚ùå $example_name failed"
                fi
              else
                skipped_examples+=("$example_name")
                echo "‚è≠Ô∏è $example_name skipped (CPU-only mode)"
              fi
            else
              # Feature-specific build
              if cargo build --manifest-path "$example_dir/Cargo.toml" --features ${{ matrix.features }} --verbose; then
                passed_examples+=("$example_name")
                echo "‚úÖ $example_name passed"
              else
                failed_examples+=("$example_name")
                echo "‚ùå $example_name failed"
              fi
            fi
          fi
        done

        # Report results
        echo ""
        echo "üìä Results Summary:"
        echo "‚úÖ Passed: ${passed_examples[*]:-none}"
        echo "‚ùå Failed: ${failed_examples[*]:-none}"
        echo "‚è≠Ô∏è Skipped: ${skipped_examples[*]:-none}"

        # Fail if any examples failed
        if [[ ${#failed_examples[@]} -gt 0 ]]; then
          echo ""
          echo "üö® ${#failed_examples[@]} example(s) failed to build"
          exit 1
        fi

        echo ""
        echo "üéâ All examples built successfully!"