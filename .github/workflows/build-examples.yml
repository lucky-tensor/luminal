name: Build Examples

# Tests compilation of all examples across different OS, Rust versions, and features
# Matrix includes: ubuntu-latest + macos-latest, Rust 1.85/stable/beta, default/cuda/metal features
# Generates a consolidated summary table with build results for each combination

on:
  push:
    branches: [ "main", "*dev", "ci*" ]
  pull_request:
    branches: [ "main", "*dev" ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test-examples:
    name: Test Examples
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [1.85, stable, beta]
        features: [default, cuda, metal]
        exclude:
          # Metal backend only works on macOS
          - os: ubuntu-latest
            features: metal
          # CUDA backend doesn't build on macOS
          - os: macos-latest
            features: cuda

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true
        components: rustfmt, clippy

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        save-if: always()


    - name: Test llama example
      id: llama
      working-directory: examples/llama
      continue-on-error: true
      run: |
        if [[ "${{ matrix.features }}" == "default" ]]; then
          cargo build --verbose
        else
          cargo build --features ${{ matrix.features }} --verbose
        fi

    - name: Test moondream example
      id: moondream
      if: always()
      working-directory: examples/moondream
      continue-on-error: true
      run: |
        if [[ "${{ matrix.features }}" == "default" ]]; then
          cargo build --verbose
        else
          cargo build --features ${{ matrix.features }} --verbose
        fi

    - name: Test phi example
      id: phi
      if: always()
      working-directory: examples/phi
      continue-on-error: true
      run: |
        if [[ "${{ matrix.features }}" == "default" ]]; then
          cargo build --verbose
        else
          cargo build --features ${{ matrix.features }} --verbose
        fi

    - name: Test qwen example
      id: qwen
      if: always()
      working-directory: examples/qwen
      continue-on-error: true
      run: |
        if [[ "${{ matrix.features }}" == "default" ]]; then
          cargo build --verbose
        else
          cargo build --features ${{ matrix.features }} --verbose
        fi

    - name: Test simple example
      id: simple
      if: always()
      working-directory: examples/simple
      continue-on-error: true
      run: |
        if [[ "${{ matrix.features }}" == "default" ]]; then
          cargo build --verbose
        else
          cargo build --features ${{ matrix.features }} --verbose
        fi

    - name: Test train_math_net example
      id: train_math_net
      if: always()
      working-directory: examples/train_math_net
      continue-on-error: true
      run: |
        if [[ "${{ matrix.features }}" == "default" ]]; then
          cargo build --verbose
        else
          cargo build --features ${{ matrix.features }} --verbose
        fi

    - name: Test whisper example
      id: whisper
      if: always()
      working-directory: examples/whisper
      continue-on-error: true
      run: |
        if [[ "${{ matrix.features }}" == "default" ]]; then
          cargo build --verbose
        else
          cargo build --features ${{ matrix.features }} --verbose
        fi

    - name: Test yolo_v8 example
      id: yolo_v8
      if: always()
      working-directory: examples/yolo_v8
      continue-on-error: true
      run: |
        if [[ "${{ matrix.features }}" == "default" ]]; then
          cargo build --verbose
        else
          cargo build --features ${{ matrix.features }} --verbose
        fi

    # Save individual matrix results for consolidation in summary job
    - name: Save results as artifact
      if: always()
      run: |
        mkdir -p results
        echo "${{ matrix.os }},${{ matrix.rust }},${{ matrix.features }},${{ steps.llama.outcome }},${{ steps.moondream.outcome }},${{ steps.phi.outcome }},${{ steps.qwen.outcome }},${{ steps.simple.outcome }},${{ steps.train_math_net.outcome }},${{ steps.whisper.outcome }},${{ steps.yolo_v8.outcome }}" > results/matrix-${{ strategy.job-index }}.csv

    - name: Upload results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: results-${{ strategy.job-index }}
        path: results/

    - name: Check for failures
      if: always()
      run: |
        failed=false
        ${{ steps.llama.outcome == 'failure' }} && failed=true
        ${{ steps.moondream.outcome == 'failure' }} && failed=true
        ${{ steps.phi.outcome == 'failure' }} && failed=true
        ${{ steps.qwen.outcome == 'failure' }} && failed=true
        ${{ steps.simple.outcome == 'failure' }} && failed=true
        ${{ steps.train_math_net.outcome == 'failure' }} && failed=true
        ${{ steps.whisper.outcome == 'failure' }} && failed=true
        ${{ steps.yolo_v8.outcome == 'failure' }} && failed=true

        if [ "$failed" = "true" ]; then
          echo "Some tests failed in this matrix"
          exit 1
        fi

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: test-examples
    if: always()
    steps:
    - name: Download all results
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    # Generate markdown table with build results sorted by OS, features, then Rust version
    - name: Create consolidated table
      run: |
        echo "# 📊 Build Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| OS | Rust | Features | llama | moondream | phi | qwen | simple | train_math_net | whisper | yolo_v8 |" >> $GITHUB_STEP_SUMMARY
        echo "|----|------|----------|-------|-----------|-----|------|--------|----------------|---------|---------|" >> $GITHUB_STEP_SUMMARY

        # Process results in hardcoded order: OS → Features → Rust version
        # Order: ubuntu-latest → macos-latest, default → cuda → metal, 1.85 → stable → beta
        for os in ubuntu-latest macos-latest; do
          for features in default cuda metal; do
            for rust in 1.85 stable beta; do
              # Skip invalid combinations
              [[ "$os" == "ubuntu-latest" && "$features" == "metal" ]] && continue
              [[ "$os" == "macos-latest" && "$features" == "cuda" ]] && continue

              # Find matching CSV file
              csv_line=""
              for csv_file in artifacts/*/matrix-*.csv; do
                if [ -f "$csv_file" ]; then
                  csv_line=$(grep "^$os,$rust,$features," "$csv_file" 2>/dev/null || true)
                  [ -n "$csv_line" ] && break
                fi
              done

              # Process the line if found
              if [ -n "$csv_line" ]; then
                IFS=',' read -r os rust features llama moondream phi qwen simple train_math_net whisper yolo_v8 <<< "$csv_line"

                # Convert outcomes to emojis
                llama_emoji=$([ "$llama" = "success" ] && echo "✅" || echo "❌")
                moondream_emoji=$([ "$moondream" = "success" ] && echo "✅" || echo "❌")
                phi_emoji=$([ "$phi" = "success" ] && echo "✅" || echo "❌")
                qwen_emoji=$([ "$qwen" = "success" ] && echo "✅" || echo "❌")
                simple_emoji=$([ "$simple" = "success" ] && echo "✅" || echo "❌")
                train_math_net_emoji=$([ "$train_math_net" = "success" ] && echo "✅" || echo "❌")
                whisper_emoji=$([ "$whisper" = "success" ] && echo "✅" || echo "❌")
                yolo_v8_emoji=$([ "$yolo_v8" = "success" ] && echo "✅" || echo "❌")

                echo "| $os | $rust | $features | $llama_emoji | $moondream_emoji | $phi_emoji | $qwen_emoji | $simple_emoji | $train_math_net_emoji | $whisper_emoji | $yolo_v8_emoji |" >> $GITHUB_STEP_SUMMARY
              fi
            done
          done
        done

