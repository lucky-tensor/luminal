name: Llama Runtime Test

on:
  push:
    branches: [ "main", "*dev", "ci*" ]
  pull_request:
    branches: [ "main", "*dev" ]
  workflow_dispatch:

jobs:
  runtime-test:
    name: Runtime Test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        features: [cuda, metal]
        exclude:
          # Metal only works on macOS
          - os: ubuntu-latest
            features: metal
          # CUDA only works on Ubuntu (for CI)
          - os: macos-latest
            features: cuda

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy

    - name: Install CUDA (Ubuntu)
      if: matrix.os == 'ubuntu-latest' && matrix.features == 'cuda'
      run: |
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
        sudo dpkg -i cuda-keyring_1.1-1_all.deb
        sudo apt-get update
        sudo apt-get -y install cuda-compiler-12-2 cuda-libraries-dev-12-2 cuda-driver-dev-12-2 cuda-cudart-dev-12-2

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Initialize test results
      run: |
        echo "## Llama Runtime Test Results for ${{ matrix.os }} - ${{ matrix.features }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test | Status | Duration | Notes |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|----------|-------|" >> $GITHUB_STEP_SUMMARY
        mkdir -p test-results

    - name: Run llama example
      id: llama-runtime
      working-directory: examples/llama
      continue-on-error: true
      run: |
        echo "Starting llama runtime test with features: ${{ matrix.features }}"
        start_time=$(date +%s)
        
        # Run the example with a timeout
        if timeout 30m cargo run --release --features ${{ matrix.features }} -- --help > /dev/null 2>&1; then
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          duration_formatted="${duration}s"
          
          echo "| Runtime Test | ✅ PASS | $duration_formatted | Successfully executed |" >> $GITHUB_STEP_SUMMARY
          echo "runtime_status=PASS" >> $GITHUB_OUTPUT
          echo "runtime_duration=$duration_formatted" >> $GITHUB_OUTPUT
        else
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          duration_formatted="${duration}s"
          
          echo "| Runtime Test | ❌ FAIL | $duration_formatted | Execution failed or timeout |" >> $GITHUB_STEP_SUMMARY
          echo "runtime_status=FAIL" >> $GITHUB_OUTPUT
          echo "runtime_duration=$duration_formatted" >> $GITHUB_OUTPUT
        fi

    - name: Create JSON results and check for failures
      if: always()
      run: |
        cat > test-results/results.json << EOF
        {
          "matrix": {
            "os": "${{ matrix.os }}",
            "features": "${{ matrix.features }}"
          },
          "results": [
            {
              "test": "llama_runtime",
              "status": "${{ steps.llama-runtime.outputs.runtime_status }}",
              "duration": "${{ steps.llama-runtime.outputs.runtime_duration }}"
            }
          ]
        }
        EOF
        
        # Check if test failed and exit with error code if so
        if grep -q "FAIL" test-results/results.json; then
          echo "❌ Runtime test failed - marking job as failed"
          exit 1
        else
          echo "✅ Runtime test passed"
        fi

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: runtime-results-${{ matrix.os }}-${{ matrix.features }}
        path: test-results/results.json

  summary:
    name: Runtime Test Summary
    runs-on: ubuntu-latest
    needs: runtime-test
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create consolidated summary
      run: |
        echo "# 🚀 Llama Runtime Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| OS | Features | Status | Duration | Notes |" >> $GITHUB_STEP_SUMMARY
        echo "|----|----------|--------|----------|-------|" >> $GITHUB_STEP_SUMMARY
        
        # Process all result files
        for result_file in artifacts/*/results.json; do
          if [ -f "$result_file" ]; then
            os=$(jq -r '.matrix.os' "$result_file" | sed 's/ubuntu-latest/Ubuntu/' | sed 's/macos-latest/macOS/')
            features=$(jq -r '.matrix.features' "$result_file")
            
            # Extract test results
            status=$(jq -r '.results[0].status' "$result_file" | sed 's/PASS/✅ PASS/' | sed 's/FAIL/❌ FAIL/')
            duration=$(jq -r '.results[0].duration' "$result_file")
            
            notes="Runtime execution"
            if [[ "$status" == *"FAIL"* ]]; then
              notes="Failed or timeout"
            fi
            
            echo "| $os | $features | $status | $duration | $notes |" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Test Details:**" >> $GITHUB_STEP_SUMMARY
        echo "- Command: \`cargo run --release --features {matrix} -- --help\`" >> $GITHUB_STEP_SUMMARY
        echo "- Timeout: 30 minutes per test" >> $GITHUB_STEP_SUMMARY
        echo "- Working Directory: \`examples/llama\`" >> $GITHUB_STEP_SUMMARY